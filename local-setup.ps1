param([string]$Profile)

function Fail($msg) { Write-Error $msg; exit 1 }

# --- Resolve profile ---
if (-not $Profile -and -not $env:AWS_PROFILE) {
  $Profile = Read-Host "Enter your AWS SSO profile name"
} elseif (-not $Profile) {
  $Profile = $env:AWS_PROFILE
  Write-Host "Using existing AWS_PROFILE: $Profile"
}
if (-not $Profile) { Fail "No AWS profile provided." }
$env:AWS_PROFILE = $Profile

# --- Verify login with correct exit-code handling ---
Write-Host "Checking AWS SSO for profile '$Profile'..."
$global:LASTEXITCODE = $null
aws sts get-caller-identity --profile $Profile | Out-Null
if ($LASTEXITCODE -ne 0) {
  Write-Host "Not logged in. Starting SSO login for '$Profile'..."
  $global:LASTEXITCODE = $null
  aws sso login --profile $Profile
  if ($LASTEXITCODE -ne 0) { Fail "AWS SSO login command returned non-zero exit code for '$Profile'." }
  Start-Sleep -Seconds 1
  $global:LASTEXITCODE = $null
  aws sts get-caller-identity --profile $Profile | Out-Null
  if ($LASTEXITCODE -ne 0) { Fail "Logged in, but could not call STS for '$Profile'." }
} else {
  Write-Host "Already logged in for '$Profile'."
}

# --- Export credentials (JSON) with retry (handles race after login) ---
Write-Host "Exporting temporary credentials..."
$creds = $null
for ($i = 0; $i -lt 12 -and -not $creds; $i++) {
  $global:LASTEXITCODE = $null
  $json = aws configure export-credentials --profile $Profile --format json 2>$null
  if ($LASTEXITCODE -eq 0 -and $json -and -not [string]::IsNullOrWhiteSpace($json)) {
    try {
      $creds = $json | ConvertFrom-Json
    } catch {
      $creds = $null
    }
  }
  if (-not $creds) { Start-Sleep -Milliseconds 800 }
}

# --- Fallback: PowerShell formatter (JOIN to single string!) ---
if (-not $creds -or -not $creds.AccessKeyId) {
  $global:LASTEXITCODE = $null
  $psLines = aws configure export-credentials --profile $Profile --format powershell 2>$null
  if ($LASTEXITCODE -eq 0 -and $psLines) {
    $ps = if ($psLines -is [array]) { [string]::Join("`n", $psLines) } else { [string]$psLines }
    Invoke-Expression $ps
  }
}

# --- If env vars still not set, mirror from JSON if we have it ---
if (-not $env:AWS_ACCESS_KEY_ID -or -not $env:AWS_SECRET_ACCESS_KEY -or -not $env:AWS_SESSION_TOKEN) {
  if ($creds -and $creds.AccessKeyId) {
    $env:AWS_ACCESS_KEY_ID     = $creds.AccessKeyId
    $env:AWS_SECRET_ACCESS_KEY = $creds.SecretAccessKey
    $env:AWS_SESSION_TOKEN     = $creds.SessionToken
  } else {
    Fail "Could not obtain credentials after retry."
  }
}

# --- Region and VITE_* ---
$region = if ($env:AWS_DEFAULT_REGION) { $env:AWS_DEFAULT_REGION } else { "us-east-1" }
$env:VITE_AWS_ACCESS_KEY_ID     = $env:AWS_ACCESS_KEY_ID
$env:VITE_AWS_SECRET_ACCESS_KEY = $env:AWS_SECRET_ACCESS_KEY
$env:VITE_AWS_SESSION_TOKEN     = $env:AWS_SESSION_TOKEN
$env:VITE_AWS_REGION            = $region

# --- Preserve existing Momento configuration ---
$existingMomentoKey = ""
$existingCacheName = ""
if (Test-Path ".env.local") {
  $existingContent = Get-Content ".env.local" -Raw -ErrorAction SilentlyContinue
  if ($existingContent -match "VITE_MOMENTO_API_KEY=(.*)") {
    $existingMomentoKey = $matches[1].Trim()
  }
  if ($existingContent -match "VITE_CACHE_NAME=(.*)") {
    $existingCacheName = $matches[1].Trim()
  }
}

# --- Write .env.local (UTF-8) ---
$timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
$envFile = @"
# AWS Credentials for Bedrock LLM Analyzer
# Generated by local-setup.ps1 at $timestamp
# Profile: $Profile

VITE_AWS_REGION=$region
VITE_AWS_ACCESS_KEY_ID=$($env:AWS_ACCESS_KEY_ID)
VITE_AWS_SECRET_ACCESS_KEY=$($env:AWS_SECRET_ACCESS_KEY)
VITE_AWS_SESSION_TOKEN=$($env:AWS_SESSION_TOKEN)
"@

# Add preserved Momento configuration if it exists
if ($existingMomentoKey) {
  $envFile += "`n`n# Momento Cache Configuration (preserved from previous setup)"
  $envFile += "`nVITE_MOMENTO_API_KEY=$existingMomentoKey"
}

if ($existingCacheName) {
  $envFile += "`nVITE_CACHE_NAME=$existingCacheName"
}

$envFile += "`n`n# Note: These are temporary SSO credentials that will expire"

$envFile | Out-File -FilePath ".env.local" -Encoding utf8 -NoNewline

Write-Host "`nEnvironment variables set for this PowerShell session."
Write-Host "Created .env.local file for React app."
if ($existingMomentoKey) {
  Write-Host "✅ Preserved existing Momento API key configuration"
}
if ($existingCacheName) {
  Write-Host "✅ Preserved existing cache name configuration"
}
Write-Host "You can now run: npm run dev"
